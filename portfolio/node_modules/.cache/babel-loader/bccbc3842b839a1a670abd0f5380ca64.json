{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jackm\\\\Desktop\\\\Coding\\\\React-Portfolio\\\\portfolio\\\\src\\\\components\\\\Contact\\\\contact.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // import { Container, Form } from \"react-bootstrap\";\n\nimport Button from \"react-bootstrap/Button\";\nimport \"./contact.css\";\nimport { BsFillChatDotsFill, BsFillEnvelopeFill, BsFillPersonFill } from \"react-icons/bs\"; // Here we import a helper function that will check if the email is valid\n// import { validateEmail } from \"../../utils/helpers\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Contact() {\n  _s();\n\n  let [userName, setUserName] = useState(\"\");\n  let [email, setEmail] = useState(\"\");\n  let [text, setText] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleInputChange = e => {\n    // Getting the value and name of the input which triggered the change\n    const {\n      name,\n      value\n    } = e.target;\n\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"userName\") {\n      setUserName(value);\n    } else {\n      setText(value);\n    }\n\n    return;\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    console.log(\"Button clicked\"); // Checking to see if inputs are empty. If so we set an error message to be displayed on the page.\n\n    if (!userName) {\n      setErrorMessage(\"Name is a required field!\");\n    } else if (!email) {\n      setErrorMessage(\"Email is a required field!\");\n    } else if (!text) {\n      setErrorMessage(\"Message is a required field!\");\n    } else {\n      setErrorMessage(\"\");\n    }\n\n    const isValid = validateEmail(email);\n\n    if (!isValid) {\n      setErrorMessage(\"Please, eneter a valid email!\");\n    }\n\n    setUserName(\"\");\n    setEmail(\"\");\n    setText(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contact-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"contact-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"contact-text\",\n        children: \"Would you like to connect?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        className: \"contact-form\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"form.Name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            className: \"contact-title\",\n            children: [\"Name \", /*#__PURE__*/_jsxDEV(BsFillPersonFill, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 20\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            className: \"contact-input\",\n            type: \"text\",\n            placeholder: \"Enter name\",\n            onChange: handleInputChange,\n            value: userName,\n            name: \"userName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"form.Email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            className: \"contact-title\",\n            children: [\"Email address \", /*#__PURE__*/_jsxDEV(BsFillEnvelopeFill, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            className: \"contact-input\",\n            type: \"email\",\n            placeholder: \"name@example.com\",\n            onChange: handleInputChange,\n            value: email,\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"form.Textarea\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            className: \"contact-title\",\n            children: [\"Message \", /*#__PURE__*/_jsxDEV(BsFillChatDotsFill, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            className: \"contact-input\",\n            as: \"textarea\",\n            rows: 3,\n            onChange: handleInputChange,\n            value: text,\n            name: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"contact-submit\",\n          as: \"input\",\n          type: \"submit\",\n          value: \"Submit\",\n          onClick: handleFormSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Contact, \"1D7gTsTb6r0bR5yFiHitPB+Fj+U=\");\n\n_c = Contact;\nexport default contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["C:/Users/jackm/Desktop/Coding/React-Portfolio/portfolio/src/components/Contact/contact.js"],"names":["React","useState","Button","BsFillChatDotsFill","BsFillEnvelopeFill","BsFillPersonFill","Contact","userName","setUserName","email","setEmail","text","setText","errorMessage","setErrorMessage","handleInputChange","e","name","value","target","handleFormSubmit","preventDefault","console","log","isValid","validateEmail","contact"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n// import { Container, Form } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./contact.css\";\r\nimport {\r\n  BsFillChatDotsFill,\r\n  BsFillEnvelopeFill,\r\n  BsFillPersonFill,\r\n} from \"react-icons/bs\";\r\n// Here we import a helper function that will check if the email is valid\r\n// import { validateEmail } from \"../../utils/helpers\";\r\n\r\nfunction Contact() {\r\n  let [userName, setUserName] = useState(\"\");\r\n  let [email, setEmail] = useState(\"\");\r\n  let [text, setText] = useState(\"\");\r\n\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    // Getting the value and name of the input which triggered the change\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"userName\") {\r\n      setUserName(value);\r\n    } else {\r\n      setText(value);\r\n    }\r\n    return;\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Button clicked\");\r\n\r\n    // Checking to see if inputs are empty. If so we set an error message to be displayed on the page.\r\n    if (!userName) {\r\n      setErrorMessage(\"Name is a required field!\");\r\n    } else if (!email) {\r\n      setErrorMessage(\"Email is a required field!\");\r\n    } else if (!text) {\r\n      setErrorMessage(\"Message is a required field!\");\r\n    } else {\r\n      setErrorMessage(\"\");\r\n    }\r\n\r\n    const isValid = validateEmail(email);\r\n\r\n    if (!isValid) {\r\n      setErrorMessage(\"Please, eneter a valid email!\");\r\n    }\r\n\r\n    setUserName(\"\");\r\n    setEmail(\"\");\r\n    setText(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"contact-wrapper\">\r\n      <Container className=\"contact-container\">\r\n        <h1 className=\"contact-text\">Would you like to connect?</h1>\r\n        <Form className=\"contact-form\">\r\n          <Form.Group controlId=\"form.Name\">\r\n            <Form.Label className=\"contact-title\">\r\n              Name <BsFillPersonFill />\r\n            </Form.Label>\r\n            <Form.Control\r\n              className=\"contact-input\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n              onChange={handleInputChange}\r\n              value={userName}\r\n              name=\"userName\"\r\n            />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"form.Email\">\r\n            <Form.Label className=\"contact-title\">\r\n              Email address <BsFillEnvelopeFill />\r\n            </Form.Label>\r\n            <Form.Control\r\n              className=\"contact-input\"\r\n              type=\"email\"\r\n              placeholder=\"name@example.com\"\r\n              onChange={handleInputChange}\r\n              value={email}\r\n              name=\"email\"\r\n            />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"form.Textarea\">\r\n            <Form.Label className=\"contact-title\">\r\n              Message <BsFillChatDotsFill />\r\n            </Form.Label>\r\n            <Form.Control\r\n              className=\"contact-input\"\r\n              as=\"textarea\"\r\n              rows={3}\r\n              onChange={handleInputChange}\r\n              value={text}\r\n              name=\"text\"\r\n            />\r\n          </Form.Group>\r\n          <Button\r\n            className=\"contact-submit\"\r\n            as=\"input\"\r\n            type=\"submit\"\r\n            value=\"Submit\"\r\n            onClick={handleFormSubmit}\r\n          />{\" \"}\r\n        </Form>\r\n        {errorMessage && (\r\n          <div>\r\n            <p className=\"error-text\">{errorMessage}</p>\r\n          </div>\r\n        )}\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default contact;"]},"metadata":{},"sourceType":"module"}